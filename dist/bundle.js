(()=>{"use strict";var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};function n(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(t,n){var e,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(s=0)),s;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=n.call(t,s)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),s=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return s}function o(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function c(t){return"function"==typeof t}function a(t){return c(null==t?void 0:t.then)}var l,d=((l=function(t){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function f(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,e,s,u;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(n){t={error:n}}finally{try{f&&!f.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else a.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(t){u=t instanceof d?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var b=r(p),y=b.next();!y.done;y=b.next()){var m=y.value;try{v(m)}catch(t){u=null!=u?u:[],t instanceof d?u=o(o([],i(u)),i(t.errors)):u.push(t)}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(s=b.return)&&s.call(b)}finally{if(e)throw e.error}}}if(u)throw new d(u)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)v(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&f(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&f(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function p(t){return t instanceof h||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function v(t){c(t)?t():t.unsubscribe()}h.EMPTY;var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},y={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var s=y.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,o([t,n],i(e))):setTimeout.apply(void 0,o([t,n],i(e)))},clearTimeout:function(t){var n=y.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function m(t){y.setTimeout((function(){var n=b.onUnhandledError;if(!n)throw t;n(t)}))}function w(){}var g=x("C",void 0,void 0);function x(t,n,e){return{kind:t,value:n,error:e}}var L=null,E=function(t){function e(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,p(n)&&n.add(e)):e.destination=D,e}return n(e,t),e.create=function(t,n,e){return new C(t,n,e)},e.prototype.next=function(t){this.isStopped?M(function(t){return x("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?M(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?M(g,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(h),_=Function.prototype.bind;function T(t,n){return _.call(t,n)}var S=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){H(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){H(t)}else H(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){H(t)}},t}(),C=function(t){function e(n,e,r){var i,o,s=t.call(this)||this;return c(n)||!n?i={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:s&&b.useDeprecatedNextContext?((o=Object.create(n)).unsubscribe=function(){return s.unsubscribe()},i={next:n.next&&T(n.next,o),error:n.error&&T(n.error,o),complete:n.complete&&T(n.complete,o)}):i=n,s.destination=new S(i),s}return n(e,t),e}(E);function H(t){var n;b.useDeprecatedSynchronousErrorHandling?(n=t,b.useDeprecatedSynchronousErrorHandling&&L&&(L.errorThrown=!0,L.error=n)):m(t)}function M(t,n){var e=b.onStoppedNotification;e&&y.setTimeout((function(){return e(t,n)}))}var D={closed:!0,next:w,error:function(t){throw t},complete:w},I="function"==typeof Symbol&&Symbol.observable||"@@observable";function k(t){return t}var q=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,i=this,o=(r=t)&&r instanceof E||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(r)&&p(r)?t:new C(t,n,e);return function(t){if(b.useDeprecatedSynchronousErrorHandling){var n=!L;if(n&&(L={errorThrown:!1,error:null}),t(),n){var e=L,r=e.errorThrown,i=e.error;if(L=null,r)throw i}}else t()}((function(){var t=i,n=t.operator,e=t.source;o.add(n?n.call(o,e):e?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=A(n))((function(n,r){var i=new C({next:function(n){try{t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n});e.subscribe(i)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[I]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(0===(e=t).length?k:1===e.length?e[0]:function(t){return e.reduce((function(t,n){return n(t)}),t)})(this);var e},t.prototype.toPromise=function(t){var n=this;return new(t=A(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function A(t){var n;return null!==(n=null!=t?t:b.Promise)&&void 0!==n?n:Promise}function P(t){return c(t[I])}function O(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function j(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var N="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(t){return c(null==t?void 0:t[N])}function U(t){return function(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=e.apply(t,n||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(n){return new Promise((function(e,r){o.push([t,n,e,r])>1||c(t,n)}))})}function c(t,n){try{(e=i[t](n)).value instanceof s?Promise.resolve(e.value.v).then(a,l):d(o[0][2],e)}catch(t){d(o[0][3],t)}var e}function a(t){c("next",t)}function l(t){c("throw",t)}function d(t,n){t(n),o.shift(),o.length&&c(o[0][0],o[0][1])}}(this,arguments,(function(){var n,r,i;return e(this,(function(e){switch(e.label){case 0:n=t.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,s(n.read())];case 3:return r=e.sent(),i=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,s(i)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function $(t){return c(null==t?void 0:t.getReader)}function B(t){if(t instanceof q)return t;if(null!=t){if(P(t))return o=t,new q((function(t){var n=o[I]();if(c(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(t))return i=t,new q((function(t){for(var n=0;n<i.length&&!t.closed;n++)t.next(i[n]);t.complete()}));if(a(t))return e=t,new q((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,m)}));if(O(t))return R(t);if(z(t))return n=t,new q((function(t){var e,i;try{for(var o=r(n),s=o.next();!s.done;s=o.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){e={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}t.complete()}));if($(t))return R(U(t))}var n,e,i,o;throw j(t)}function R(t){return new q((function(n){(function(t,n){var i,o,s,u,c,a,l,d;return c=this,a=void 0,d=function(){var c,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),i=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=r(t),n={},i("next"),i("throw"),i("return"),n[Symbol.asyncIterator]=function(){return this},n);function i(e){n[e]=t[e]&&function(n){return new Promise((function(r,i){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,i,(n=t[e](n)).done,n.value)}))}}}(t),e.label=1;case 1:return[4,i.next()];case 2:if((o=e.sent()).done)return[3,4];if(c=o.value,n.next(c),n.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),s={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),o&&!o.done&&(u=i.return)?[4,u.call(i)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{i(d.next(t))}catch(t){n(t)}}function r(t){try{i(d.throw(t))}catch(t){n(t)}}function i(n){var i;n.done?t(n.value):(i=n.value,i instanceof l?i:new l((function(t){t(i)}))).then(e,r)}i((d=d.apply(c,a||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function Q(t){return function(n){if(function(t){return c(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(t,n,e,r,i){return new F(t,n,e,r,i)}var F=function(t){function e(n,e,r,i,o,s){var u=t.call(this,n)||this;return u.onFinalize=o,u.shouldUnsubscribe=s,u._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(e,t),e.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},e}(E);function G(t,n){return Q((function(e,r){var i=0;e.subscribe(Y(r,(function(e){r.next(t.call(n,e,i++))})))}))}function J(t,n,e,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){e(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function K(t,n,e){return void 0===e&&(e=1/0),c(n)?K((function(e,r){return G((function(t,i){return n(e,t,r,i)}))(B(t(e,r)))}),e):("number"==typeof n&&(e=n),Q((function(n,r){return function(t,n,e,r,i,o,s,u){var c=[],a=0,l=0,d=!1,f=function(){!d||c.length||a||n.complete()},h=function(t){return a<r?p(t):c.push(t)},p=function(t){a++;var i=!1;B(e(t,l++)).subscribe(Y(n,(function(t){n.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),p(t);f()}catch(t){n.error(t)}var t})))};return t.subscribe(Y(n,h,(function(){d=!0,f()}))),function(){}}(n,r,t,e)})))}var V=Array.isArray;var W=["addListener","removeListener"],X=["addEventListener","removeEventListener"],Z=["on","off"];function tt(t,n,e,r){if(c(e)&&(r=e,e=void 0),r)return tt(t,n,e).pipe((s=r,G((function(t){return function(t,n){return V(n)?t.apply(void 0,o([],i(n))):t(n)}(s,t)}))));var s,a=i(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?X.map((function(r){return function(i){return t[r](n,i,e)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?W.map(nt(t,n)):function(t){return c(t.on)&&c(t.off)}(t)?Z.map(nt(t,n)):[],2),l=a[0],d=a[1];if(!l&&u(t))return K((function(t){return tt(t,n,e)}))(B(t));if(!l)throw new TypeError("Invalid event target");return new q((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return l(n),function(){return d(n)}}))}function nt(t,n){return function(e){return function(r){return t[e](n,r)}}}function et(t,n){return Q((function(e,r){var i=0;e.subscribe(Y(r,(function(e){return t.call(n,e,i++)&&r.next(e)})))}))}var rt=function(t){function e(n,e){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},e}(h),it={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var s=it.delegate;return(null==s?void 0:s.setInterval)?s.setInterval.apply(s,o([t,n],i(e))):setInterval.apply(void 0,o([t,n],i(e)))},clearInterval:function(t){var n=it.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},ot=function(t){function e(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,n){var e;if(void 0===n&&(n=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,n)),this.pending=!0,this.delay=n,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(i,this.id,n),this},e.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),it.setInterval(t.flush.bind(t,this),e)},e.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;null!=n&&it.clearInterval(n)},e.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(rt),st={now:function(){return(st.delegate||Date).now()},delegate:void 0},ut=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=st.now,t}(),ct=new(function(t){function e(n,e){void 0===e&&(e=ut.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r}return n(e,t),e.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},e}(ut))(ot);function at(t){return t&&c(t.schedule)}function lt(t,n,e){void 0===t&&(t=0),void 0===e&&(e=ct);var r=-1;return null!=n&&(at(n)?e=n:r=n),new q((function(n){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-e.now():t;o<0&&(o=0);var s=0;return e.schedule((function(){n.closed||(n.next(s++),0<=r?this.schedule(void 0,r):n.complete())}),o)}))}var dt=new q((function(t){return t.complete()}));function ft(t){return t[t.length-1]}function ht(t){return at(ft(t))?t.pop():void 0}function pt(t,n){return void 0===n&&(n=0),Q((function(e,r){e.subscribe(Y(r,(function(e){return J(r,t,(function(){return r.next(e)}),n)}),(function(){return J(r,t,(function(){return r.complete()}),n)}),(function(e){return J(r,t,(function(){return r.error(e)}),n)})))}))}function vt(t,n){return void 0===n&&(n=0),Q((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function bt(t,n){if(!t)throw new Error("Iterable cannot be null");return new q((function(e){J(e,n,(function(){var r=t[Symbol.asyncIterator]();J(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function yt(t,n){return n?function(t,n){if(null!=t){if(P(t))return function(t,n){return B(t).pipe(vt(n),pt(n))}(t,n);if(u(t))return function(t,n){return new q((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(a(t))return function(t,n){return B(t).pipe(vt(n),pt(n))}(t,n);if(O(t))return bt(t,n);if(z(t))return function(t,n){return new q((function(e){var r;return J(e,n,(function(){r=t[N](),J(e,n,(function(){var t,n,i;try{n=(t=r.next()).value,i=t.done}catch(t){return void e.error(t)}i?e.complete():e.next(n)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(t,n);if($(t))return function(t,n){return bt(U(t),n)}(t,n)}throw j(t)}(t,n):B(t)}var mt=function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,u)}c((r=r.apply(t,n||[])).next())}))};const wt=document.createElement("div");wt.classList.add("main"),document.body.prepend(wt),new class{constructor(t){this.mainDiv=t,this.click$=tt(this.mainDiv,"click")}CreateHome(){const t=document.createElement("h1");t.classList.add("title"),t.innerHTML="90's Hip Hop Quiz",this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("lightning"),n.innerHTML="Lightning Round",this.mainDiv.appendChild(n);const e=document.createElement("button");e.classList.add("start"),e.innerHTML="Start",this.mainDiv.appendChild(e);const r=document.createElement("button");r.classList.add("scoreboard"),r.innerHTML="Scoreboard",this.mainDiv.appendChild(r),this.clickSub=this.click$.pipe(et((t=>t.target instanceof HTMLButtonElement)),G((t=>t.target))).subscribe((t=>{"start"===t.className?this.CreateQuiz():"scoreboard"===t.className?this.CreateScoreboard():"lightning"===t.className&&this.CreateLightningRound()}))}Clear(){for(;this.mainDiv.firstChild;)this.mainDiv.removeChild(this.mainDiv.firstChild);this.clickSub.unsubscribe()}CreateQuiz(){return mt(this,void 0,void 0,(function*(){this.Clear();const t=yield fetch("src/data/questions.json");this.questions=yield t.json();const n=document.createElement("p");n.classList.add("question"),n.innerHTML=this.questions[0].question,this.mainDiv.appendChild(n);const e=document.createElement("button");e.classList.add("answer_1"),e.innerHTML=this.questions[0].answers[0],this.mainDiv.appendChild(e);const r=document.createElement("button");r.classList.add("answer_2"),r.innerHTML=this.questions[0].answers[1],this.mainDiv.appendChild(r);const i=document.createElement("button");i.classList.add("answer_3"),i.innerHTML=this.questions[0].answers[2],this.mainDiv.appendChild(i);const o=document.createElement("button");o.classList.add("answer_4"),o.innerHTML=this.questions[0].answers[3],this.mainDiv.appendChild(o);const s=document.createElement("button");s.classList.add("next"),s.innerHTML="Next",s.hidden=!0,this.mainDiv.appendChild(s);let u=3;this.clickSub=this.click$.pipe(et((t=>t.target instanceof HTMLButtonElement)),G((t=>t.target))).subscribe((t=>{t.innerHTML===this.questions[0].correct_answer?(console.log("Tacan"),s.hidden=!1,e.disabled=!0,r.disabled=!0,i.disabled=!0,o.disabled=!0):"Next"===t.innerHTML?(s.hidden=!0,0==u&&(this.Clear(),this.CreateGameOver(0)),e.disabled=!1,r.disabled=!1,i.disabled=!1,o.disabled=!1):(console.log("Netacan"),s.hidden=!1,u--,console.log(u),e.disabled=!0,r.disabled=!0,i.disabled=!0,o.disabled=!0)}))}))}CreateGameOver(t){const n=document.createElement("p");n.classList.add("pointsText"),n.innerHTML="You earned: ",this.mainDiv.appendChild(n);const e=document.createElement("p");e.classList.add("pointsNumber"),e.innerHTML=String(t)+" points!",this.mainDiv.appendChild(e);const r=document.createElement("button");r.classList.add("home"),r.innerHTML="Home",this.mainDiv.appendChild(r),this.clickSub=this.click$.pipe(et((t=>t.target instanceof HTMLButtonElement)),G((t=>t.target))).subscribe((t=>{this.Clear(),this.CreateHome()}))}CreateScoreboard(){return mt(this,void 0,void 0,(function*(){this.Clear();const t=yield fetch("src/data/scoreboard.json"),n=yield t.json(),e=document.createElement("table");e.classList.add("board"),this.mainDiv.appendChild(e);const r=document.createElement("thead");r.classList.add("boardHead"),e.appendChild(r);const i=document.createElement("th");i.classList.add("nameHead"),i.innerHTML="Name",r.appendChild(i);const o=document.createElement("th");o.classList.add("scoreHead"),o.innerHTML="Score",r.appendChild(o);const s=document.createElement("tbody");s.classList.add("tbody"),e.appendChild(s),n.forEach((t=>{const n=document.createElement("tr"),e=document.createElement("td");e.innerHTML=t.name,n.appendChild(e);const r=document.createElement("td");r.innerHTML=String(t.score),n.appendChild(r),s.appendChild(n)}));const u=document.createElement("button");u.classList.add("home"),u.innerHTML="Home",this.mainDiv.appendChild(u),this.clickSub=this.click$.pipe(et((t=>t.target instanceof HTMLButtonElement)),G((t=>t.target))).subscribe((t=>{this.Clear(),this.CreateHome()}))}))}CreateLightningRound(){return mt(this,void 0,void 0,(function*(){this.Clear();const t=document.createElement("p");t.classList.add("question"),this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("answer_1"),this.mainDiv.appendChild(n);const e=document.createElement("button");e.classList.add("answer_2"),this.mainDiv.appendChild(e);const r=document.createElement("button");r.classList.add("answer_3"),this.mainDiv.appendChild(r);const i=document.createElement("button");i.classList.add("answer_4"),this.mainDiv.appendChild(i);const o=yield fetch("src/data/questions.json");this.questions=yield o.json();const s=lt(5e4),u=tt(this.mainDiv,"click").pipe(et((t=>t.target instanceof HTMLButtonElement)),G((t=>t.target))).pipe((c=t=>{const n=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=ht(t),r=function(t,n){return"number"==typeof ft(t)?t.pop():1/0}(t),i=t;return i.length?1===i.length?B(i[0]):function(t){return void 0===t&&(t=1/0),K(k,t)}(r)(yt(i,e)):dt}(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return yt(t,ht(t))}(t),lt(5e3,5e3));return n},Q((function(t,n){var e=null,r=!1,i=function(){return r&&!e&&n.complete()};t.subscribe(Y(n,(function(t){null==e||e.unsubscribe();0;B(c(t)).subscribe(e=Y(n,(function(t){return n.next(t)}),(function(){e=null,i()})))}),(function(){r=!0,i()})))}))));var c,a;this.lightningQuestion$=u.pipe((a=s,Q((function(t,n){B(a).subscribe(Y(n,(function(){return n.complete()}),w)),!n.closed&&t.subscribe(n)})))),this.lightningQuestion$.subscribe({next:o=>{o instanceof HTMLButtonElement&&console.log(o);let s=Math.floor(Math.random()*this.questions.length);for(;!0===this.questions[s].passed;)s=Math.floor(Math.random()*this.questions.length);console.log(this.questions[s]),t.innerHTML=this.questions[s].question,n.innerHTML=this.questions[s].answers[3],e.innerHTML=this.questions[s].answers[0],r.innerHTML=this.questions[s].answers[1],i.innerHTML=this.questions[s].answers[2],console.log((new Date).getSeconds())}})}))}}(wt).CreateHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,