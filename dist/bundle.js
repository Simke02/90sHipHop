(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function o(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var a=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function c(e){return"function"==typeof e}function u(e){return c(null==e?void 0:e.then)}var l,d=((l=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function h(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,s,a;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var l=r(u),h=l.next();!h.done;h=l.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else u.remove(this);var f=this.initialTeardown;if(c(f))try{f()}catch(e){a=e instanceof d?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var v=r(p),b=v.next();!b.done;b=v.next()){var y=b.value;try{m(y)}catch(e){a=null!=a?a:[],e instanceof d?a=o(o([],i(a)),i(e.errors)):a.push(e)}}}catch(e){n={error:e}}finally{try{b&&!b.done&&(s=v.return)&&s.call(v)}finally{if(n)throw n.error}}}if(a)throw new d(a)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&h(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&h(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}();function p(e){return e instanceof f||e&&"closed"in e&&c(e.remove)&&c(e.add)&&c(e.unsubscribe)}function m(e){c(e)?e():e.unsubscribe()}f.EMPTY;var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=b.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){b.setTimeout((function(){var t=v.onUnhandledError;if(!t)throw e;t(e)}))}function L(){}var g=C("C",void 0,void 0);function C(e,t,n){return{kind:e,value:t,error:n}}var T=null,w=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=_,n}return t(n,e),n.create=function(e,t,n){return new S(e,t,n)},n.prototype.next=function(e){this.isStopped?x(function(e){return C("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?x(C("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?x(g,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),H=Function.prototype.bind;function E(e,t){return H.call(e,t)}var M=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){D(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){D(e)}else D(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){D(e)}},e}(),S=function(e){function n(t,n,r){var i,o,s=e.call(this)||this;return c(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&v.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&E(t.next,o),error:t.error&&E(t.error,o),complete:t.complete&&E(t.complete,o)}):i=t,s.destination=new M(i),s}return t(n,e),n}(w);function D(e){var t;v.useDeprecatedSynchronousErrorHandling?(t=e,v.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=t)):y(e)}function x(e,t){var n=v.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var _={closed:!0,next:L,error:function(e){throw e},complete:L},q="function"==typeof Symbol&&Symbol.observable||"@@observable";function P(e){return e}var k=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof w||function(e){return e&&c(e.next)&&c(e.error)&&c(e.complete)}(r)&&p(r)?e:new S(e,t,n);return function(e){if(v.useDeprecatedSynchronousErrorHandling){var t=!T;if(t&&(T={errorThrown:!1,error:null}),e(),t){var n=T,r=n.errorThrown,i=n.error;if(T=null,r)throw i}}else e()}((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=A(t))((function(t,r){var i=new S({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[q]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?P:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=A(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function A(e){var t;return null!==(t=null!=e?e:v.Promise)&&void 0!==t?t:Promise}function j(e){return c(e[q])}function N(e){return Symbol.asyncIterator&&c(null==e?void 0:e[Symbol.asyncIterator])}function I(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var O="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function R(e){return c(null==e?void 0:e[O])}function Q(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=i[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,l):d(o[0][2],n)}catch(e){d(o[0][3],e)}var n}function u(e){c("next",e)}function l(e){c("throw",e)}function d(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function G(e){return c(null==e?void 0:e.getReader)}function $(e){if(e instanceof k)return e;if(null!=e){if(j(e))return o=e,new k((function(e){var t=o[q]();if(c(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(e))return i=e,new k((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(u(e))return n=e,new k((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,y)}));if(N(e))return z(e);if(R(e))return t=e,new k((function(e){var n,i;try{for(var o=r(t),s=o.next();!s.done;s=o.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}e.complete()}));if(G(e))return z(Q(e))}var t,n,i,o;throw I(e)}function z(e){return new k((function(t){(function(e,t){var i,o,s,a,c,u,l,d;return c=this,u=void 0,d=function(){var c,u;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(c=o.value,t.next(c),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=n.sent(),s={error:u},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(a=i.return)?[4,a.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{i(d.next(e))}catch(e){t(e)}}function r(e){try{i(d.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof l?i:new l((function(e){e(i)}))).then(n,r)}i((d=d.apply(c,u||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function B(e){return function(t){if(function(e){return c(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,t,n,r,i){return new U(e,t,n,r,i)}var U=function(e){function n(t,n,r,i,o,s){var a=e.call(this,t)||this;return a.onFinalize=o,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(w);function J(e,t){return B((function(n,r){var i=0;n.subscribe(Y(r,(function(n){r.next(e.call(t,n,i++))})))}))}function F(e,t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function V(e,t,n){return void 0===n&&(n=1/0),c(t)?V((function(n,r){return J((function(e,i){return t(n,e,r,i)}))($(e(n,r)))}),n):("number"==typeof t&&(n=t),B((function(t,r){return function(e,t,n,r,i,o,s,a){var c=[],u=0,l=0,d=!1,h=function(){!d||c.length||u||t.complete()},f=function(e){return u<r?p(e):c.push(e)},p=function(e){u++;var i=!1;$(n(e,l++)).subscribe(Y(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{u--;for(;c.length&&u<r;)e=void 0,e=c.shift(),p(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(Y(t,f,(function(){d=!0,h()}))),function(){}}(t,r,e,n)})))}var K=Array.isArray;var Z=["addListener","removeListener"],W=["addEventListener","removeEventListener"],X=["on","off"];function ee(e,t,n,r){if(c(n)&&(r=n,n=void 0),r)return ee(e,t,n).pipe((s=r,J((function(e){return function(e,t){return K(t)?e.apply(void 0,o([],i(t))):e(t)}(s,e)}))));var s,u=i(function(e){return c(e.addEventListener)&&c(e.removeEventListener)}(e)?W.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return c(e.addListener)&&c(e.removeListener)}(e)?Z.map(te(e,t)):function(e){return c(e.on)&&c(e.off)}(e)?X.map(te(e,t)):[],2),l=u[0],d=u[1];if(!l&&a(e))return V((function(e){return ee(e,t,n)}))($(e));if(!l)throw new TypeError("Invalid event target");return new k((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return d(t)}}))}function te(e,t){return function(n){return function(r){return e[n](t,r)}}}function ne(e,t){return B((function(n,r){var i=0;n.subscribe(Y(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}var re=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(f),ie={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=ie.delegate;return(null==s?void 0:s.setInterval)?s.setInterval.apply(s,o([e,t],i(n))):setInterval.apply(void 0,o([e,t],i(n)))},clearInterval:function(e){var t=ie.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},oe=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ie.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ie.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(re),se={now:function(){return(se.delegate||Date).now()},delegate:void 0},ae=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=se.now,e}(),ce=new(function(e){function n(t,n){void 0===n&&(n=ae.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(ae))(oe);function ue(e){return e&&c(e.schedule)}function le(e,t,n){void 0===e&&(e=0),void 0===n&&(n=ce);var r=-1;return null!=t&&(ue(t)?n=t:r=t),new k((function(t){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-n.now():e;o<0&&(o=0);var s=0;return n.schedule((function(){t.closed||(t.next(s++),0<=r?this.schedule(void 0,r):t.complete())}),o)}))}var de=new k((function(e){return e.complete()}));function he(e){return e[e.length-1]}function fe(e){return ue(he(e))?e.pop():void 0}function pe(e,t){return void 0===t&&(t=0),B((function(n,r){n.subscribe(Y(r,(function(n){return F(r,e,(function(){return r.next(n)}),t)}),(function(){return F(r,e,(function(){return r.complete()}),t)}),(function(n){return F(r,e,(function(){return r.error(n)}),t)})))}))}function me(e,t){return void 0===t&&(t=0),B((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function ve(e,t){if(!e)throw new Error("Iterable cannot be null");return new k((function(n){F(n,t,(function(){var r=e[Symbol.asyncIterator]();F(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function be(e,t){return t?function(e,t){if(null!=e){if(j(e))return function(e,t){return $(e).pipe(me(t),pe(t))}(e,t);if(a(e))return function(e,t){return new k((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(u(e))return function(e,t){return $(e).pipe(me(t),pe(t))}(e,t);if(N(e))return ve(e,t);if(R(e))return function(e,t){return new k((function(n){var r;return F(n,t,(function(){r=e[O](),F(n,t,(function(){var e,t,i;try{t=(e=r.next()).value,i=e.done}catch(e){return void n.error(e)}i?n.complete():n.next(t)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(G(e))return function(e,t){return ve(Q(e),t)}(e,t)}throw I(e)}(e,t):$(e)}function ye(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return be(e,fe(e))}var Le=Array.isArray;function ge(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return c(he(e))?e.pop():void 0}(e),r=function(e){return 1===e.length&&Le(e[0])?e[0]:e}(e);return r.length?new k((function(e){var t=r.map((function(){return[]})),s=r.map((function(){return!1}));e.add((function(){t=s=null}));for(var a=function(a){$(r[a]).subscribe(Y(e,(function(r){if(t[a].push(r),t.every((function(e){return e.length}))){var c=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],i(c))):c),t.some((function(e,t){return!e.length&&s[t]}))&&e.complete()}}),(function(){s[a]=!0,!t[a].length&&e.complete()})))},c=0;!e.closed&&c<r.length;c++)a(c);return function(){t=s=null}})):de}var Ce=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};const Te=document.createElement("div");Te.classList.add("main"),document.body.prepend(Te);new class{constructor(e){this.mainDiv=e,this.click$=ee(this.mainDiv,"click")}CreateHome(){const e=document.createElement("h1");e.classList.add("title"),e.innerHTML="90's Hip Hop Quiz",this.mainDiv.appendChild(e);const t=document.createElement("button");t.classList.add("lightning"),t.innerHTML="Lightning Round",this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("quickest"),n.innerHTML="Quickest Player",this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("start"),r.innerHTML="Start",this.mainDiv.appendChild(r);const i=document.createElement("button");i.classList.add("scoreboard"),i.innerHTML="Scoreboard",this.mainDiv.appendChild(i);const o=document.createElement("button");o.classList.add("scoreboard"),o.innerHTML="Name Generator",this.mainDiv.appendChild(o),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((e=>{"Start"===e.innerHTML?this.CreateQuiz():"Scoreboard"===e.innerHTML?this.CreateScoreboard():"Lightning Round"===e.innerHTML?this.CreateLightningRound():"Quickest Player"===e.innerHTML?this.CreateQuickestPlayer():"Name Generator"===e.innerHTML&&this.CreateRandomNameGenerator()}))}Clear(){for(;this.mainDiv.firstChild;)this.mainDiv.removeChild(this.mainDiv.firstChild);this.clickSub.unsubscribe()}CreateQuiz(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/questions.json");this.questions=yield e.json();let t=Math.floor(Math.random()*this.questions.length),n=this.questions[t].correct_answer;const r=document.createElement("p");r.classList.add("scoreText"),r.innerHTML="Score: ",this.mainDiv.appendChild(r);const i=document.createElement("p");i.classList.add("scoreValue"),i.innerHTML=String(0),this.mainDiv.appendChild(i);const o=document.createElement("p");o.classList.add("livesText"),o.innerHTML="Lives: ",this.mainDiv.appendChild(o);const s=document.createElement("p");s.classList.add("livesValue"),s.innerHTML=String(3),this.mainDiv.appendChild(s);const a=document.createElement("p");a.classList.add("question"),a.innerHTML=this.questions[t].question,this.mainDiv.appendChild(a);const c=document.createElement("button");c.classList.add("answer_1"),c.innerHTML=this.questions[t].answers[0],this.mainDiv.appendChild(c);const u=document.createElement("button");u.classList.add("answer_2"),u.innerHTML=this.questions[t].answers[1],this.mainDiv.appendChild(u);const l=document.createElement("button");l.classList.add("answer_3"),l.innerHTML=this.questions[t].answers[2],this.mainDiv.appendChild(l);const d=document.createElement("button");d.classList.add("answer_4"),d.innerHTML=this.questions[t].answers[3],this.mainDiv.appendChild(d);const h=document.createElement("button");h.classList.add("next"),h.innerHTML="Next",h.hidden=!0,this.mainDiv.appendChild(h);let f=3,p=0;this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((e=>{e.innerHTML===n?(console.log("Tacan"),h.hidden=!1,c.disabled=!0,u.disabled=!0,l.disabled=!0,d.disabled=!0,p+=this.questions[t].difficulty,i.innerHTML=String(p)):"Next"===e.innerHTML?(h.hidden=!0,0==f?(this.Clear(),this.CreateGameOver(p)):(this.questions.splice(t,1),this.questions.length>0?(t=Math.floor(Math.random()*this.questions.length),n=this.questions[t].correct_answer,a.innerHTML=this.questions[t].question,c.innerHTML=this.questions[t].answers[0],u.innerHTML=this.questions[t].answers[1],l.innerHTML=this.questions[t].answers[2],d.innerHTML=this.questions[t].answers[3]):(this.Clear(),this.CreateGameOver(p))),c.disabled=!1,u.disabled=!1,l.disabled=!1,d.disabled=!1):(console.log("Netacan"),h.hidden=!1,f--,s.innerHTML=String(f),c.disabled=!0,u.disabled=!0,l.disabled=!0,d.disabled=!0)}))}))}CreateGameOver(e){return Ce(this,void 0,void 0,(function*(){const t=document.createElement("p");t.classList.add("pointsText"),t.innerHTML="You earned: ",this.mainDiv.appendChild(t);const n=document.createElement("p");n.classList.add("pointsNumber"),n.innerHTML=String(e)+" points!",this.mainDiv.appendChild(n);const r=yield fetch("src/data/scoreboard.json"),i=yield r.json();let o=0,s=!1,a=0;for(;o<5;o++)i.items[o].score<e&&(s=!0,a=o,o=5);const c=document.createElement("input");c.classList.add("inputName"),c.hidden=!0,this.mainDiv.appendChild(c);const u=document.createElement("button");u.classList.add("enterName"),u.hidden=!0,u.innerHTML="Enter",this.mainDiv.appendChild(u),s&&(c.hidden=!1,u.hidden=!1);const l=document.createElement("button");l.classList.add("home"),l.innerHTML="Home",this.mainDiv.appendChild(l);const d=document.createElement("button");d.classList.add("anotherRound"),d.innerHTML="Another Round",this.mainDiv.appendChild(d),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateQuiz();else if("Enter"===t.innerHTML){for(c.hidden=!0,u.hidden=!0,fetch(`http://localhost:3000/items/${a+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:c.value,score:e})}),o=a;o<4;o++)fetch(`http://localhost:3000/items/${o+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i.items[o].name,score:i.items[o].score})});this.Clear(),this.CreateHome()}}))}))}CreateScoreboard(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/scoreboard.json"),t=yield e.json();let n=[],r=[],i=[],o=0;for(;o<t.items.length;o++)o<5?n.push(t.items[o]):o>=5&&o<10?r.push(t.items[o]):i.push(t.items[o]);const s=document.createElement("p");s.innerHTML="Quiz",this.mainDiv.appendChild(s);const a=document.createElement("table");a.classList.add("board"),this.mainDiv.appendChild(a);const c=document.createElement("thead");c.classList.add("boardHead"),a.appendChild(c);const u=document.createElement("th");u.classList.add("nameHead"),u.innerHTML="Name",c.appendChild(u);const l=document.createElement("th");l.classList.add("scoreHead"),l.innerHTML="Score",c.appendChild(l);const d=document.createElement("tbody");d.classList.add("tbody"),a.appendChild(d),n.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),d.appendChild(t)}));const h=document.createElement("br");this.mainDiv.appendChild(h);const f=document.createElement("p");f.innerHTML="Quickest Player",this.mainDiv.appendChild(f);const p=document.createElement("table");p.classList.add("boardQP"),this.mainDiv.appendChild(p);const m=document.createElement("thead");m.classList.add("boardHeadQP"),p.appendChild(m);const v=document.createElement("th");v.classList.add("nameHeadQP"),v.innerHTML="Name",m.appendChild(v);const b=document.createElement("th");b.classList.add("scoreHeadQP"),b.innerHTML="Score",m.appendChild(b);const y=document.createElement("tbody");y.classList.add("tbodyQP"),p.appendChild(y),r.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),y.appendChild(t)}));const L=document.createElement("p");L.innerHTML="I bet you can't finish in all of them times combined: "+r.reduce(((e,t)=>e+t.score),0)+"s",this.mainDiv.appendChild(L);const g=document.createElement("p");g.innerHTML="Lightning Round",this.mainDiv.appendChild(g);const C=document.createElement("table");C.classList.add("boardLR"),this.mainDiv.appendChild(C);const T=document.createElement("thead");T.classList.add("boardHeadLR"),C.appendChild(T);const w=document.createElement("th");w.classList.add("nameHeadLR"),w.innerHTML="Name",T.appendChild(w);const H=document.createElement("th");H.classList.add("scoreHeadLR"),H.innerHTML="Score",T.appendChild(H);const E=document.createElement("tbody");E.classList.add("tbodyLR"),C.appendChild(E),i.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),E.appendChild(t)}));const M=document.createElement("button");M.classList.add("home"),M.innerHTML="Home",this.mainDiv.appendChild(M),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((e=>{this.Clear(),this.CreateHome()}))}))}CreateLightningRound(){return Ce(this,void 0,void 0,(function*(){this.Clear();let e="",t=0;const n=document.createElement("p");n.hidden=!0,n.classList.add("question"),this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("go"),r.innerHTML="Go!",this.mainDiv.appendChild(r);const i=document.createElement("button");i.hidden=!0,i.classList.add("answer_1"),this.mainDiv.appendChild(i);const o=document.createElement("button");o.hidden=!0,o.classList.add("answer_2"),this.mainDiv.appendChild(o);const s=document.createElement("button");s.hidden=!0,s.classList.add("answer_3"),this.mainDiv.appendChild(s);const a=document.createElement("button");a.hidden=!0,a.classList.add("answer_4"),this.mainDiv.appendChild(a);const c=yield fetch("src/data/questions.json");this.questions=yield c.json();const u=e=>{this.CreateLRGameOver(e)},l=le(25e3),d=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).pipe((h=e=>function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=fe(e),r=function(e,t){return"number"==typeof he(e)?e.pop():1/0}(e),i=e;return i.length?1===i.length?$(i[0]):function(e){return void 0===e&&(e=1/0),V(P,e)}(r)(be(i,n)):de}(ye(e),le(5e3,5e3)),B((function(e,t){var n=null,r=!1,i=function(){return r&&!n&&t.complete()};e.subscribe(Y(t,(function(e){null==n||n.unsubscribe();0;$(h(e)).subscribe(n=Y(t,(function(e){return t.next(e)}),(function(){n=null,i()})))}),(function(){r=!0,i()})))}))));var h,f;this.lightningQuestion$=d.pipe((f=l,B((function(e,t){$(f).subscribe(Y(t,(function(){return t.complete()}),L)),!t.closed&&e.subscribe(t)})))),ee(r,"click").subscribe({next:()=>{r.hidden=!0,n.hidden=!1,i.hidden=!1,o.hidden=!1,s.hidden=!1,a.hidden=!1,this.lightningQuestion$.subscribe({next:r=>{r instanceof HTMLButtonElement&&r.innerHTML===e&&(t++,console.log(`Score is: ${t}`));let c=Math.floor(Math.random()*this.questions.length);console.log(this.questions[c]),n.innerHTML=this.questions[c].question,i.innerHTML=this.questions[c].answers[3],o.innerHTML=this.questions[c].answers[0],s.innerHTML=this.questions[c].answers[1],a.innerHTML=this.questions[c].answers[2],console.log((new Date).getSeconds());const u=this.questions.splice(c,1);e=u[0].correct_answer},complete(){u(t)}})}})}))}CreateLRGameOver(e){return Ce(this,void 0,void 0,(function*(){this.Clear();const t=document.createElement("p");t.classList.add("scoreText"),t.innerHTML="You answered correctly "+String(e)+" questions",this.mainDiv.appendChild(t);const n=yield fetch("src/data/scoreboard.json"),r=yield n.json();let i=10,o=!1,s=0;for(;i<15;i++)r.items[i].score<e&&(o=!0,s=i,i=15);const a=document.createElement("input");a.classList.add("inputName"),a.hidden=!0,this.mainDiv.appendChild(a);const c=document.createElement("button");c.classList.add("enterName"),c.hidden=!0,c.innerHTML="Enter",this.mainDiv.appendChild(c),o&&(a.hidden=!1,c.hidden=!1);const u=document.createElement("button");u.classList.add("home"),u.innerHTML="Home",this.mainDiv.appendChild(u);const l=document.createElement("button");l.classList.add("anotherRound"),l.innerHTML="Another Round",this.mainDiv.appendChild(l),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateLightningRound();else if("Enter"===t.innerHTML){for(a.hidden=!0,c.hidden=!0,fetch(`http://localhost:3000/items/${s+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:a.value,score:e})}),i=s;i<14;i++)fetch(`http://localhost:3000/items/${i+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:r.items[i].name,score:r.items[i].score})});this.Clear(),this.CreateHome()}}))}))}CreateQuickestPlayer(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=document.createElement("button");e.classList.add("go"),e.innerHTML="Go!",this.mainDiv.appendChild(e);const t=document.createElement("p");t.hidden=!0,t.classList.add("question"),this.mainDiv.appendChild(t);const n=document.createElement("button");n.hidden=!0,n.classList.add("answer_1"),this.mainDiv.appendChild(n);const r=document.createElement("button");r.hidden=!0,r.classList.add("answer_2"),this.mainDiv.appendChild(r);const i=document.createElement("button");i.hidden=!0,i.classList.add("answer_3"),this.mainDiv.appendChild(i);const o=document.createElement("button");o.hidden=!0,o.classList.add("answer_4"),this.mainDiv.appendChild(o);const s=yield fetch("src/data/questions.json");this.questions=yield s.json();let a,c,u="",l=!0;const d=(e,t)=>{this.CreateQPGameOver(e,t)};const h=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target)),11<=0?function(){return de}:B((function(e,t){var n=0;e.subscribe(Y(t,(function(e){++n<=11&&(t.next(e),11<=n&&t.complete())})))}))).subscribe({next:s=>{s instanceof HTMLButtonElement&&(s.innerHTML!==u&&"Go!"!==s.innerHTML?(l=!1,h.unsubscribe(),d(0,!1)):"Go!"===s.innerHTML&&(e.hidden=!0,t.hidden=!1,n.hidden=!1,r.hidden=!1,i.hidden=!1,o.hidden=!1,a=new Date));let f=Math.floor(Math.random()*this.questions.length);console.log(this.questions[f]),t.innerHTML=this.questions[f].question,n.innerHTML=this.questions[f].answers[3],r.innerHTML=this.questions[f].answers[0],i.innerHTML=this.questions[f].answers[1],o.innerHTML=this.questions[f].answers[2];const p=this.questions.splice(f,1);u=p[0].correct_answer,c=s},complete(){if(l){console.log("Kraj: "+(new Date).getSeconds()),console.log("Pocetak: "+a.getSeconds());let e=(new Date).getSeconds()-a.getSeconds();console.log("P "+e),e<0&&(e=(new Date).getSeconds()+60-a.getSeconds(),console.log("N "+e));let t=(new Date).getMinutes()-a.getMinutes();0!==a.getSeconds()&&0===(new Date).getSeconds()&&(t--,console.log("Smanjeni minuti "+t)),1!==t||(new Date).getSeconds()-a.getSeconds()>0?(0!==t&&t--,console.log("Dodati minuti "+t),e+=60*t):0===e&&(e=60),console.log("Z "+e),d(e,!0)}}})}))}CreateQPGameOver(e,t){return Ce(this,void 0,void 0,(function*(){this.Clear();const n=document.createElement("p");n.classList.add("scoreText"),n.innerHTML=t?"Congratulations! You finished in "+String(e)+" seconds":"You failed bitch ass nigga!",this.mainDiv.appendChild(n);const r=yield fetch("src/data/scoreboard.json"),i=yield r.json();let o=5,s=!1,a=0;for(;o<10;o++)i.items[o].score>e&&(s=!0,a=o,o=10);const c=document.createElement("input");c.classList.add("inputName"),c.hidden=!0,this.mainDiv.appendChild(c);const u=document.createElement("button");u.classList.add("enterName"),u.hidden=!0,u.innerHTML="Enter",this.mainDiv.appendChild(u),s&&(c.hidden=!1,u.hidden=!1);const l=document.createElement("button");l.classList.add("home"),l.innerHTML="Home",this.mainDiv.appendChild(l);const d=document.createElement("button");d.classList.add("anotherRound"),d.innerHTML="Another Round",this.mainDiv.appendChild(d),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateQuickestPlayer();else if("Enter"===t.innerHTML){for(c.hidden=!0,u.hidden=!0,fetch(`http://localhost:3000/items/${a+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:c.value,score:e})}),o=a;o<9;o++)fetch(`http://localhost:3000/items/${o+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i.items[o].name,score:i.items[o].score})});this.Clear(),this.CreateHome()}}))}))}shuffleArray(e){const t=[...e];for(let e=t.length-1;e>0;e--){const n=Math.floor(Math.random()*(e+1));[t[e],t[n]]=[t[n],t[e]]}return t}CreateRandomNameGenerator(){return Ce(this,void 0,void 0,(function*(){this.Clear();let e=yield fetch("src/data/first.json"),t=yield e.json();t=this.shuffleArray(t);const n=ye(t);e=yield fetch("src/data/last.json");let r=yield e.json();r=this.shuffleArray(r),ge(n,ye(r)).pipe(J((([e,t])=>({f:e,l:t})))).subscribe({next:e=>{let n=0;for(;n<t.length;n++){const t=document.createElement("p");t.innerHTML=e.f[n].name+" "+e.l[n].name,this.mainDiv.appendChild(t)}},complete:()=>{const e=document.createElement("button");e.innerHTML="Generate",this.mainDiv.append(e);const t=document.createElement("button");t.innerHTML="Home",this.mainDiv.append(t)}}),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),J((e=>e.target))).subscribe((e=>{"Home"===e.innerHTML?(this.Clear(),this.CreateHome()):"Generate"===e.innerHTML&&this.CreateRandomNameGenerator()}))}))}}(Te).CreateHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,