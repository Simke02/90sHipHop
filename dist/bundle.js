(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,r=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){s.label=c[1];break}if(6===c[0]&&s.label<i[1]){s.label=i[1],i=c;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(c);break}i[2]&&s.ops.pop(),s.trys.pop();continue}c=t.call(e,s)}catch(e){c=[6,e],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function o(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function u(e){return a(null==e?void 0:e.then)}var l,d=((l=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function h(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,s,c;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var l=r(u),h=l.next();!h.done;h=l.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else u.remove(this);var f=this.initialTeardown;if(a(f))try{f()}catch(e){c=e instanceof d?e.errors:[e]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var m=r(p),b=m.next();!b.done;b=m.next()){var y=b.value;try{v(y)}catch(e){c=null!=c?c:[],e instanceof d?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{b&&!b.done&&(s=m.return)&&s.call(m)}finally{if(n)throw n.error}}}if(c)throw new d(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&h(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&h(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}();function p(e){return e instanceof f||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function v(e){a(e)?e():e.unsubscribe()}f.EMPTY;var m={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=b.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){b.setTimeout((function(){var t=m.onUnhandledError;if(!t)throw e;t(e)}))}function w(){}var g=L("C",void 0,void 0);function L(e,t,n){return{kind:e,value:t,error:n}}var T=null,E=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=D,n}return t(n,e),n.create=function(e,t,n){return new x(e,t,n)},n.prototype.next=function(e){this.isStopped?_(function(e){return L("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?_(L("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?_(g,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),C=Function.prototype.bind;function H(e,t){return C.call(e,t)}var S=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){M(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){M(e)}else M(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){M(e)}},e}(),x=function(e){function n(t,n,r){var i,o,s=e.call(this)||this;return a(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&m.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&H(t.next,o),error:t.error&&H(t.error,o),complete:t.complete&&H(t.complete,o)}):i=t,s.destination=new S(i),s}return t(n,e),n}(E);function M(e){var t;m.useDeprecatedSynchronousErrorHandling?(t=e,m.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=t)):y(e)}function _(e,t){var n=m.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var D={closed:!0,next:w,error:function(e){throw e},complete:w},q="function"==typeof Symbol&&Symbol.observable||"@@observable";function k(e){return e}var P=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof E||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&p(r)?e:new x(e,t,n);return function(e){if(m.useDeprecatedSynchronousErrorHandling){var t=!T;if(t&&(T={errorThrown:!1,error:null}),e(),t){var n=T,r=n.errorThrown,i=n.error;if(T=null,r)throw i}}else e()}((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=I(t))((function(t,r){var i=new x({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[q]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?k:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=I(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function I(e){var t;return null!==(t=null!=e?e:m.Promise)&&void 0!==t?t:Promise}function A(e){return a(e[q])}function j(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function O(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var N="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function R(e){return a(null==e?void 0:e[N])}function Q(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,l):d(o[0][2],n)}catch(e){d(o[0][3],e)}var n}function u(e){a("next",e)}function l(e){a("throw",e)}function d(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function z(e){return a(null==e?void 0:e.getReader)}function G(e){if(e instanceof P)return e;if(null!=e){if(A(e))return o=e,new P((function(e){var t=o[q]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new P((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(u(e))return n=e,new P((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,y)}));if(j(e))return B(e);if(R(e))return t=e,new P((function(e){var n,i;try{for(var o=r(t),s=o.next();!s.done;s=o.next()){var c=s.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}e.complete()}));if(z(e))return B(Q(e))}var t,n,i,o;throw O(e)}function B(e){return new P((function(t){(function(e,t){var i,o,s,c,a,u,l,d;return a=this,u=void 0,d=function(){var a,u;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=n.sent(),s={error:u},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{i(d.next(e))}catch(e){t(e)}}function r(e){try{i(d.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof l?i:new l((function(e){e(i)}))).then(n,r)}i((d=d.apply(a,u||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function $(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,t,n,r,i){return new U(e,t,n,r,i)}var U=function(e){function n(t,n,r,i,o,s){var c=e.call(this,t)||this;return c.onFinalize=o,c.shouldUnsubscribe=s,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(E);function F(e,t){return $((function(n,r){var i=0;n.subscribe(Y(r,(function(n){r.next(e.call(t,n,i++))})))}))}function J(e,t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function K(e,t,n){return void 0===n&&(n=1/0),a(t)?K((function(n,r){return F((function(e,i){return t(n,e,r,i)}))(G(e(n,r)))}),n):("number"==typeof t&&(n=t),$((function(t,r){return function(e,t,n,r,i,o,s,c){var a=[],u=0,l=0,d=!1,h=function(){!d||a.length||u||t.complete()},f=function(e){return u<r?p(e):a.push(e)},p=function(e){u++;var i=!1;G(n(e,l++)).subscribe(Y(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{u--;for(;a.length&&u<r;)e=void 0,e=a.shift(),p(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(Y(t,f,(function(){d=!0,h()}))),function(){}}(t,r,e,n)})))}var Z=Array.isArray;var V=["addListener","removeListener"],W=["addEventListener","removeEventListener"],X=["on","off"];function ee(e,t,n,r){if(a(n)&&(r=n,n=void 0),r)return ee(e,t,n).pipe((s=r,F((function(e){return function(e,t){return Z(t)?e.apply(void 0,o([],i(t))):e(t)}(s,e)}))));var s,u=i(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?W.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?V.map(te(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?X.map(te(e,t)):[],2),l=u[0],d=u[1];if(!l&&c(e))return K((function(e){return ee(e,t,n)}))(G(e));if(!l)throw new TypeError("Invalid event target");return new P((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return l(t),function(){return d(t)}}))}function te(e,t){return function(n){return function(r){return e[n](t,r)}}}function ne(e,t){return $((function(n,r){var i=0;n.subscribe(Y(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}var re=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(f),ie={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=ie.delegate;return(null==s?void 0:s.setInterval)?s.setInterval.apply(s,o([e,t],i(n))):setInterval.apply(void 0,o([e,t],i(n)))},clearInterval:function(e){var t=ie.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},oe=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ie.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ie.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(re),se={now:function(){return(se.delegate||Date).now()},delegate:void 0},ce=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=se.now,e}(),ae=new(function(e){function n(t,n){void 0===n&&(n=ce.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(ce))(oe);function ue(e){return e&&a(e.schedule)}function le(e,t,n){void 0===e&&(e=0),void 0===n&&(n=ae);var r=-1;return null!=t&&(ue(t)?n=t:r=t),new P((function(t){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-n.now():e;o<0&&(o=0);var s=0;return n.schedule((function(){t.closed||(t.next(s++),0<=r?this.schedule(void 0,r):t.complete())}),o)}))}var de=new P((function(e){return e.complete()}));function he(e){return e[e.length-1]}function fe(e){return ue(he(e))?e.pop():void 0}function pe(e,t){return void 0===t&&(t=0),$((function(n,r){n.subscribe(Y(r,(function(n){return J(r,e,(function(){return r.next(n)}),t)}),(function(){return J(r,e,(function(){return r.complete()}),t)}),(function(n){return J(r,e,(function(){return r.error(n)}),t)})))}))}function ve(e,t){return void 0===t&&(t=0),$((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function me(e,t){if(!e)throw new Error("Iterable cannot be null");return new P((function(n){J(n,t,(function(){var r=e[Symbol.asyncIterator]();J(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function be(e,t){return t?function(e,t){if(null!=e){if(A(e))return function(e,t){return G(e).pipe(ve(t),pe(t))}(e,t);if(c(e))return function(e,t){return new P((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(u(e))return function(e,t){return G(e).pipe(ve(t),pe(t))}(e,t);if(j(e))return me(e,t);if(R(e))return function(e,t){return new P((function(n){var r;return J(n,t,(function(){r=e[N](),J(n,t,(function(){var e,t,i;try{t=(e=r.next()).value,i=e.done}catch(e){return void n.error(e)}i?n.complete():n.next(t)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(z(e))return function(e,t){return me(Q(e),t)}(e,t)}throw O(e)}(e,t):G(e)}class ye{constructor(e,t){this.name=e,this.score=t}}var we=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{a(r.next(e))}catch(e){o(e)}}function c(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}a((r=r.apply(e,t||[])).next())}))};const ge=document.createElement("div");ge.classList.add("main"),document.body.prepend(ge),new class{constructor(e){this.mainDiv=e,this.click$=ee(this.mainDiv,"click")}CreateHome(){const e=document.createElement("h1");e.classList.add("title"),e.innerHTML="90's Hip Hop Quiz",this.mainDiv.appendChild(e);const t=document.createElement("button");t.classList.add("lightning"),t.innerHTML="Lightning Round",this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("quickest"),n.innerHTML="Quickest Player",this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("start"),r.innerHTML="Start",this.mainDiv.appendChild(r);const i=document.createElement("button");i.classList.add("scoreboard"),i.innerHTML="Scoreboard",this.mainDiv.appendChild(i),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((e=>{"start"===e.className?this.CreateQuiz():"scoreboard"===e.className?this.CreateScoreboard():"lightning"===e.className?this.CreateLightningRound():"quickest"===e.className&&this.CreateQuickestPlayer()}))}Clear(){for(;this.mainDiv.firstChild;)this.mainDiv.removeChild(this.mainDiv.firstChild);this.clickSub.unsubscribe()}CreateQuiz(){return we(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/questions.json");this.questions=yield e.json();const t=document.createElement("p");t.classList.add("question"),t.innerHTML=this.questions[0].question,this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("answer_1"),n.innerHTML=this.questions[0].answers[0],this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("answer_2"),r.innerHTML=this.questions[0].answers[1],this.mainDiv.appendChild(r);const i=document.createElement("button");i.classList.add("answer_3"),i.innerHTML=this.questions[0].answers[2],this.mainDiv.appendChild(i);const o=document.createElement("button");o.classList.add("answer_4"),o.innerHTML=this.questions[0].answers[3],this.mainDiv.appendChild(o);const s=document.createElement("button");s.classList.add("next"),s.innerHTML="Next",s.hidden=!0,this.mainDiv.appendChild(s);let c=3;this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((e=>{e.innerHTML===this.questions[0].correct_answer?(console.log("Tacan"),s.hidden=!1,n.disabled=!0,r.disabled=!0,i.disabled=!0,o.disabled=!0):"Next"===e.innerHTML?(s.hidden=!0,0==c&&(this.Clear(),this.CreateGameOver(0)),n.disabled=!1,r.disabled=!1,i.disabled=!1,o.disabled=!1):(console.log("Netacan"),s.hidden=!1,c--,console.log(c),n.disabled=!0,r.disabled=!0,i.disabled=!0,o.disabled=!0)}))}))}CreateGameOver(e){const t=document.createElement("p");t.classList.add("pointsText"),t.innerHTML="You earned: ",this.mainDiv.appendChild(t);const n=document.createElement("p");n.classList.add("pointsNumber"),n.innerHTML=String(e)+" points!",this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("home"),r.innerHTML="Home",this.mainDiv.appendChild(r),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((e=>{this.Clear(),this.CreateHome()}))}CreateScoreboard(){return we(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/scoreboard.json"),t=yield e.json(),n=document.createElement("table");n.classList.add("board"),this.mainDiv.appendChild(n);const r=document.createElement("thead");r.classList.add("boardHead"),n.appendChild(r);const i=document.createElement("th");i.classList.add("nameHead"),i.innerHTML="Name",r.appendChild(i);const o=document.createElement("th");o.classList.add("scoreHead"),o.innerHTML="Score",r.appendChild(o);const s=document.createElement("tbody");s.classList.add("tbody"),n.appendChild(s),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),s.appendChild(t)}));const c=document.createElement("button");c.classList.add("home"),c.innerHTML="Home",this.mainDiv.appendChild(c),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((e=>{this.Clear(),this.CreateHome()}))}))}CreateLightningRound(){return we(this,void 0,void 0,(function*(){this.Clear();let e="",t=0;const n=document.createElement("p");n.hidden=!0,n.classList.add("question"),this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("go"),r.innerHTML="Go!",this.mainDiv.appendChild(r);const i=document.createElement("button");i.hidden=!0,i.classList.add("answer_1"),this.mainDiv.appendChild(i);const o=document.createElement("button");o.hidden=!0,o.classList.add("answer_2"),this.mainDiv.appendChild(o);const s=document.createElement("button");s.hidden=!0,s.classList.add("answer_3"),this.mainDiv.appendChild(s);const c=document.createElement("button");c.hidden=!0,c.classList.add("answer_4"),this.mainDiv.appendChild(c);const a=yield fetch("src/data/questions.json");this.questions=yield a.json();const u=e=>{this.CreateLRGameOver(e)},l=le(1e4),d=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).pipe((h=e=>{const t=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=fe(e),r=function(e,t){return"number"==typeof he(e)?e.pop():1/0}(e),i=e;return i.length?1===i.length?G(i[0]):function(e){return void 0===e&&(e=1/0),K(k,e)}(r)(be(i,n)):de}(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return be(e,fe(e))}(e),le(5e3,5e3));return t},$((function(e,t){var n=null,r=!1,i=function(){return r&&!n&&t.complete()};e.subscribe(Y(t,(function(e){null==n||n.unsubscribe();0;G(h(e)).subscribe(n=Y(t,(function(e){return t.next(e)}),(function(){n=null,i()})))}),(function(){r=!0,i()})))}))));var h,f;this.lightningQuestion$=d.pipe((f=l,$((function(e,t){G(f).subscribe(Y(t,(function(){return t.complete()}),w)),!t.closed&&e.subscribe(t)})))),ee(r,"click").subscribe({next:()=>{r.hidden=!0,n.hidden=!1,i.hidden=!1,o.hidden=!1,s.hidden=!1,c.hidden=!1,this.lightningQuestion$.subscribe({next:r=>{r instanceof HTMLButtonElement&&r.innerHTML===e&&(t++,console.log(`Score is: ${t}`));let a=Math.floor(Math.random()*this.questions.length);console.log(this.questions[a]),n.innerHTML=this.questions[a].question,i.innerHTML=this.questions[a].answers[3],o.innerHTML=this.questions[a].answers[0],s.innerHTML=this.questions[a].answers[1],c.innerHTML=this.questions[a].answers[2],console.log((new Date).getSeconds());const u=this.questions.splice(a,1);e=u[0].correct_answer},complete(){u(t)}})}})}))}CreateLRGameOver(e){this.Clear();const t=document.createElement("p");t.classList.add("scoreText"),t.innerHTML="You answered correctly "+String(e)+" questions",this.mainDiv.appendChild(t);const n=document.createElement("button");n.classList.add("home"),n.innerHTML="Home",this.mainDiv.appendChild(n);const r=document.createElement("button");r.classList.add("anotherRound"),r.innerHTML="Another Round",this.mainDiv.appendChild(r),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((e=>{"Home"===e.innerHTML?(this.Clear(),this.CreateHome()):"Another Round"===e.innerHTML&&this.CreateLightningRound()}))}CreateQuickestPlayer(){return we(this,void 0,void 0,(function*(){this.Clear();const e=document.createElement("button");e.classList.add("go"),e.innerHTML="Go!",this.mainDiv.appendChild(e);const t=document.createElement("p");t.hidden=!0,t.classList.add("question"),this.mainDiv.appendChild(t);const n=document.createElement("button");n.hidden=!0,n.classList.add("answer_1"),this.mainDiv.appendChild(n);const r=document.createElement("button");r.hidden=!0,r.classList.add("answer_2"),this.mainDiv.appendChild(r);const i=document.createElement("button");i.hidden=!0,i.classList.add("answer_3"),this.mainDiv.appendChild(i);const o=document.createElement("button");o.hidden=!0,o.classList.add("answer_4"),this.mainDiv.appendChild(o);const s=yield fetch("src/data/questions.json");this.questions=yield s.json();let c,a,u="",l=!0;const d=(e,t)=>{this.CreateQPGameOver(e,t)};const h=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target)),11<=0?function(){return de}:$((function(e,t){var n=0;e.subscribe(Y(t,(function(e){++n<=11&&(t.next(e),11<=n&&t.complete())})))}))).subscribe({next:s=>{s instanceof HTMLButtonElement&&(s.innerHTML!==u&&"Go!"!==s.innerHTML?(l=!1,h.unsubscribe(),d(0,!1)):"Go!"===s.innerHTML&&(e.hidden=!0,t.hidden=!1,n.hidden=!1,r.hidden=!1,i.hidden=!1,o.hidden=!1,c=new Date));let f=Math.floor(Math.random()*this.questions.length);console.log(this.questions[f]),t.innerHTML=this.questions[f].question,n.innerHTML=this.questions[f].answers[3],r.innerHTML=this.questions[f].answers[0],i.innerHTML=this.questions[f].answers[1],o.innerHTML=this.questions[f].answers[2];const p=this.questions.splice(f,1);u=p[0].correct_answer,a=s},complete(){if(l){console.log("Kraj: "+(new Date).getSeconds()),console.log("Pocetak: "+c.getSeconds());let e=(new Date).getSeconds()-c.getSeconds();console.log("P "+e),e<0&&(e=(new Date).getSeconds()+60-c.getSeconds(),console.log("N "+e));let t=(new Date).getMinutes()-c.getMinutes();0!==c.getSeconds()&&0===(new Date).getSeconds()&&(t--,console.log("Smanjeni minuti "+t)),1!==t||(new Date).getSeconds()-c.getSeconds()>0?(0!==t&&t--,console.log("Dodati minuti "+t),e+=60*t):0===e&&(e=60),console.log("Z "+e),d(e,!0)}}})}))}CreateQPGameOver(e,t){return we(this,void 0,void 0,(function*(){this.Clear();const n=document.createElement("p");n.classList.add("scoreText"),n.innerHTML=t?"Congratulations! You finished in "+String(e)+" seconds":"You failed bitch ass nigga!",this.mainDiv.appendChild(n);const r=yield fetch("src/data/scoreboardQP.json"),i=yield r.json();let o=0,s=!1,c=0;for(;o<i.length;o++)i[o].score>e&&(s=!0,c=o,o=i.length);const a=document.createElement("input");a.classList.add("inputName"),a.hidden=!0,this.mainDiv.appendChild(a);const u=document.createElement("button");u.classList.add("enterName"),u.hidden=!0,u.innerHTML="Enter",this.mainDiv.appendChild(u),s&&(a.hidden=!1,u.hidden=!1);const l=document.createElement("button");l.classList.add("home"),l.innerHTML="Home",this.mainDiv.appendChild(l);const d=document.createElement("button");d.classList.add("anotherRound"),d.innerHTML="Another Round",this.mainDiv.appendChild(d),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),F((e=>e.target))).subscribe((t=>{"Home"===t.innerHTML?(this.Clear(),this.CreateHome()):"Another Round"===t.innerHTML?this.CreateQuickestPlayer():"Enter"===t.innerHTML&&(i.splice(c,0,new ye(a.innerHTML,e)),i.pop(),a.hidden=!0,u.hidden=!0,fetch("src/data/scoreboardQP.json",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}))}))}))}}(ge).CreateHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,