(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(a){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,r=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){s.label=c[1];break}if(6===c[0]&&s.label<i[1]){s.label=i[1],i=c;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(c);break}i[2]&&s.ops.pop(),s.trys.pop();continue}c=t.call(e,s)}catch(e){c=[6,e],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function o(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function s(e){return this instanceof s?(this.v=e,this):new s(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}function u(e){return a(null==e?void 0:e.then)}var d,l=((d=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),d.prototype.constructor=d,d);function h(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,n,s,c;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var d=r(u),h=d.next();!h.done;h=d.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else u.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(e){c=e instanceof l?e.errors:[e]}var f=this._finalizers;if(f){this._finalizers=null;try{for(var b=r(f),v=b.next();!v.done;v=b.next()){var y=v.value;try{m(y)}catch(e){c=null!=c?c:[],e instanceof l?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{v&&!v.done&&(s=b.return)&&s.call(b)}finally{if(n)throw n.error}}}if(c)throw new l(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)m(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&h(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&h(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}();function f(e){return e instanceof p||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function m(e){a(e)?e():e.unsubscribe()}p.EMPTY;var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},v={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=v.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=v.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function y(e){v.setTimeout((function(){var t=b.onUnhandledError;if(!t)throw e;t(e)}))}function L(){}var g=C("C",void 0,void 0);function C(e,t,n){return{kind:e,value:t,error:n}}var H=null,E=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,f(t)&&t.add(n)):n.destination=q,n}return t(n,e),n.create=function(e,t,n){return new S(e,t,n)},n.prototype.next=function(e){this.isStopped?_(function(e){return C("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?_(C("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?_(g,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),T=Function.prototype.bind;function w(e,t){return T.call(e,t)}var M=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){x(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){x(e)}else x(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){x(e)}},e}(),S=function(e){function n(t,n,r){var i,o,s=e.call(this)||this;return a(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&b.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&w(t.next,o),error:t.error&&w(t.error,o),complete:t.complete&&w(t.complete,o)}):i=t,s.destination=new M(i),s}return t(n,e),n}(E);function x(e){var t;b.useDeprecatedSynchronousErrorHandling?(t=e,b.useDeprecatedSynchronousErrorHandling&&H&&(H.errorThrown=!0,H.error=t)):y(e)}function _(e,t){var n=b.onStoppedNotification;n&&v.setTimeout((function(){return n(e,t)}))}var q={closed:!0,next:L,error:function(e){throw e},complete:L},k="function"==typeof Symbol&&Symbol.observable||"@@observable";function O(e){return e}var G=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof E||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(r)&&f(r)?e:new S(e,t,n);return function(e){if(b.useDeprecatedSynchronousErrorHandling){var t=!H;if(t&&(H={errorThrown:!1,error:null}),e(),t){var n=H,r=n.errorThrown,i=n.error;if(H=null,r)throw i}}else e()}((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=A(t))((function(t,r){var i=new S({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[k]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?O:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=A(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function A(e){var t;return null!==(t=null!=e?e:b.Promise)&&void 0!==t?t:Promise}function j(e){return a(e[k])}function P(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}function I(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function N(e){return a(null==e?void 0:e[D])}function R(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof s?Promise.resolve(n.value.v).then(u,d):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function u(e){a("next",e)}function d(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function $(e){return a(null==e?void 0:e.getReader)}function Q(e){if(e instanceof G)return e;if(null!=e){if(j(e))return o=e,new G((function(e){var t=o[k]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return i=e,new G((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(u(e))return n=e,new G((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,y)}));if(P(e))return B(e);if(N(e))return t=e,new G((function(e){var n,i;try{for(var o=r(t),s=o.next();!s.done;s=o.next()){var c=s.value;if(e.next(c),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}e.complete()}));if($(e))return B(R(e))}var t,n,i,o;throw I(e)}function B(e){return new G((function(t){(function(e,t){var i,o,s,c,a,u,d,l;return a=this,u=void 0,l=function(){var a,u;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=n.sent(),s={error:u},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((d=void 0)||(d=Promise))((function(e,t){function n(e){try{i(l.next(e))}catch(e){t(e)}}function r(e){try{i(l.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof d?i:new d((function(e){e(i)}))).then(n,r)}i((l=l.apply(a,u||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function z(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function W(e,t,n,r,i){return new Y(e,t,n,r,i)}var Y=function(e){function n(t,n,r,i,o,s){var c=e.call(this,t)||this;return c.onFinalize=o,c.shouldUnsubscribe=s,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(E);function U(e,t){return z((function(n,r){var i=0;n.subscribe(W(r,(function(n){r.next(e.call(t,n,i++))})))}))}function J(e,t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function F(e,t,n){return void 0===n&&(n=1/0),a(t)?F((function(n,r){return U((function(e,i){return t(n,e,r,i)}))(Q(e(n,r)))}),n):("number"==typeof t&&(n=t),z((function(t,r){return function(e,t,n,r,i,o,s,c){var a=[],u=0,d=0,l=!1,h=function(){!l||a.length||u||t.complete()},p=function(e){return u<r?f(e):a.push(e)},f=function(e){u++;var i=!1;Q(n(e,d++)).subscribe(W(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{u--;for(;a.length&&u<r;)e=void 0,e=a.shift(),f(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(W(t,p,(function(){l=!0,h()}))),function(){}}(t,r,e,n)})))}var K=Array.isArray;var Z=["addListener","removeListener"],V=["addEventListener","removeEventListener"],X=["on","off"];function ee(e,t,n,r){if(a(n)&&(r=n,n=void 0),r)return ee(e,t,n).pipe((s=r,U((function(e){return function(e,t){return K(t)?e.apply(void 0,o([],i(t))):e(t)}(s,e)}))));var s,u=i(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?V.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?Z.map(te(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?X.map(te(e,t)):[],2),d=u[0],l=u[1];if(!d&&c(e))return F((function(e){return ee(e,t,n)}))(Q(e));if(!d)throw new TypeError("Invalid event target");return new G((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return d(t),function(){return l(t)}}))}function te(e,t){return function(n){return function(r){return e[n](t,r)}}}function ne(e,t){return z((function(n,r){var i=0;n.subscribe(W(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}var re=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(p),ie={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=ie.delegate;return(null==s?void 0:s.setInterval)?s.setInterval.apply(s,o([e,t],i(n))):setInterval.apply(void 0,o([e,t],i(n)))},clearInterval:function(e){var t=ie.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},oe=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),ie.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&ie.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(re),se={now:function(){return(se.delegate||Date).now()},delegate:void 0},ce=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=se.now,e}(),ae=new(function(e){function n(t,n){void 0===n&&(n=ce.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(ce))(oe);function ue(e){return e&&a(e.schedule)}function de(e,t,n){void 0===e&&(e=0),void 0===n&&(n=ae);var r=-1;return null!=t&&(ue(t)?n=t:r=t),new G((function(t){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-n.now():e;o<0&&(o=0);var s=0;return n.schedule((function(){t.closed||(t.next(s++),0<=r?this.schedule(void 0,r):t.complete())}),o)}))}var le=new G((function(e){return e.complete()}));function he(e){return e[e.length-1]}function pe(e){return ue(he(e))?e.pop():void 0}function fe(e,t){return void 0===t&&(t=0),z((function(n,r){n.subscribe(W(r,(function(n){return J(r,e,(function(){return r.next(n)}),t)}),(function(){return J(r,e,(function(){return r.complete()}),t)}),(function(n){return J(r,e,(function(){return r.error(n)}),t)})))}))}function me(e,t){return void 0===t&&(t=0),z((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function be(e,t){if(!e)throw new Error("Iterable cannot be null");return new G((function(n){J(n,t,(function(){var r=e[Symbol.asyncIterator]();J(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function ve(e,t){return t?function(e,t){if(null!=e){if(j(e))return function(e,t){return Q(e).pipe(me(t),fe(t))}(e,t);if(c(e))return function(e,t){return new G((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(u(e))return function(e,t){return Q(e).pipe(me(t),fe(t))}(e,t);if(P(e))return be(e,t);if(N(e))return function(e,t){return new G((function(n){var r;return J(n,t,(function(){r=e[D](),J(n,t,(function(){var e,t,i;try{t=(e=r.next()).value,i=e.done}catch(e){return void n.error(e)}i?n.complete():n.next(t)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(e,t);if($(e))return function(e,t){return be(R(e),t)}(e,t)}throw I(e)}(e,t):Q(e)}function ye(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return ve(e,pe(e))}var Le=Array.isArray;function ge(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return a(he(e))?e.pop():void 0}(e),r=function(e){return 1===e.length&&Le(e[0])?e[0]:e}(e);return r.length?new G((function(e){var t=r.map((function(){return[]})),s=r.map((function(){return!1}));e.add((function(){t=s=null}));for(var c=function(c){Q(r[c]).subscribe(W(e,(function(r){if(t[c].push(r),t.every((function(e){return e.length}))){var a=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],i(a))):a),t.some((function(e,t){return!e.length&&s[t]}))&&e.complete()}}),(function(){s[c]=!0,!t[c].length&&e.complete()})))},a=0;!e.closed&&a<r.length;a++)c(a);return function(){t=s=null}})):le}var Ce=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{a(r.next(e))}catch(e){o(e)}}function c(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}a((r=r.apply(e,t||[])).next())}))};const He=document.createElement("div");He.classList.add("main"),document.body.prepend(He);const Ee=new class{constructor(e){this.mainDiv=e,this.click$=ee(this.mainDiv,"click")}CreateHome(){const e=document.createElement("div");e.classList.add("container"),this.mainDiv.appendChild(e);const t=document.createElement("h1");t.classList.add("title"),t.innerHTML="90's Hip Hop Quiz",e.appendChild(t);const n=document.createElement("div");n.classList.add("buttonsGrid"),e.append(n);const r=document.createElement("button");r.classList.add("buttonH"),r.innerHTML="Lightning Round",n.appendChild(r);const i=document.createElement("button");i.classList.add("buttonH"),i.innerHTML="Quickest Player",n.appendChild(i);const o=document.createElement("button");o.classList.add("buttonH"),o.innerHTML="Scoreboard",n.appendChild(o);const s=document.createElement("button");s.classList.add("buttonH"),s.innerHTML="Name Generator",n.appendChild(s);const c=document.createElement("button");c.classList.add("full-width"),c.innerHTML="Start",n.appendChild(c),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((e=>{"Start"===e.innerHTML?this.CreateQuiz():"Scoreboard"===e.innerHTML?this.CreateScoreboard():"Lightning Round"===e.innerHTML?this.CreateLightningRound():"Quickest Player"===e.innerHTML?this.CreateQuickestPlayer():"Name Generator"===e.innerHTML&&this.CreateRandomNameGenerator()}))}Clear(){for(;this.mainDiv.firstChild;)this.mainDiv.removeChild(this.mainDiv.firstChild);this.clickSub.unsubscribe()}CreateQuiz(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/questions.json");this.questions=yield e.json();let t=Math.floor(Math.random()*this.questions.length),n=this.questions[t].correct_answer;const r=document.createElement("div");r.classList.add("container"),this.mainDiv.appendChild(r);const i=document.createElement("div");i.classList.add("scoreLives"),r.appendChild(i);const o=document.createElement("p");o.classList.add("scoreText"),o.innerHTML="Score: 0",i.appendChild(o);const s=document.createElement("p");s.classList.add("livesText"),s.innerHTML="Lives: 3",i.appendChild(s);const c=document.createElement("p");c.classList.add("question"),c.innerHTML=this.questions[t].question,r.appendChild(c);const a=document.createElement("div");a.classList.add("buttonsGrid"),r.append(a);const u=document.createElement("button");u.id="1",u.classList.add("buttonH"),u.innerHTML=this.questions[t].answers[0],a.appendChild(u);const d=document.createElement("button");d.id="2",d.classList.add("buttonH"),d.innerHTML=this.questions[t].answers[1],a.appendChild(d);const l=document.createElement("button");l.id="3",l.classList.add("buttonH"),l.innerHTML=this.questions[t].answers[2],a.appendChild(l);const h=document.createElement("button");h.id="4",h.classList.add("buttonH"),h.innerHTML=this.questions[t].answers[3],a.appendChild(h);const p=document.createElement("button");p.classList.add("full-width"),p.innerHTML="Next",p.hidden=!0,a.appendChild(p),c.style.maxWidth=String(a.offsetWidth)+"px";let f=3,m=0;this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((e=>{if(e.innerHTML===n)console.log("Tacan"),p.hidden=!1,u.disabled=!0,d.disabled=!0,l.disabled=!0,h.disabled=!0,e.style.backgroundColor="#006466",sessionStorage.setItem("clicked",e.id),m+=this.questions[t].difficulty,o.innerHTML="Score: "+String(m);else if("Next"===e.innerHTML){if(p.hidden=!0,0==f)this.Clear(),this.CreateGameOver(m);else if(this.questions.splice(t,1),this.questions.length>0){t=Math.floor(Math.random()*this.questions.length);const e=sessionStorage.getItem("clicked"),r=document.getElementById(e);r instanceof HTMLButtonElement&&(r.style.backgroundColor="#6D7476"),n=this.questions[t].correct_answer,c.innerHTML=this.questions[t].question,u.innerHTML=this.questions[t].answers[0],d.innerHTML=this.questions[t].answers[1],l.innerHTML=this.questions[t].answers[2],h.innerHTML=this.questions[t].answers[3],c.style.maxWidth=String(a.offsetWidth)+"px"}else this.Clear(),this.CreateGameOver(m);u.disabled=!1,d.disabled=!1,l.disabled=!1,h.disabled=!1}else console.log("Netacan"),p.hidden=!1,f--,s.innerHTML="Lives: "+String(f),u.disabled=!0,d.disabled=!0,l.disabled=!0,h.disabled=!0,e.style.backgroundColor="#780C0C",sessionStorage.setItem("clicked",e.id)}))}))}CreateGameOver(e){return Ce(this,void 0,void 0,(function*(){const t=document.createElement("div");t.classList.add("containerGO"),this.mainDiv.appendChild(t);const n=document.createElement("p");n.classList.add("pointsText"),n.innerHTML="You earned: "+String(e)+" points!",t.appendChild(n);const r=yield fetch("src/data/scoreboard.json"),i=yield r.json();let o=0,s=!1,c=0;for(;o<5;o++)i.items[o].score<e&&(s=!0,c=o,o=5);const a=document.createElement("div");a.classList.add("middleRow"),t.appendChild(a);const u=document.createElement("input");u.classList.add("inputGO"),u.hidden=!0,a.appendChild(u);const d=document.createElement("button");d.classList.add("buttonIGO"),d.hidden=!0,d.innerHTML="Enter",a.appendChild(d),s&&(u.hidden=!1,d.hidden=!1);const l=document.createElement("div");l.classList.add("buttonsGrid"),t.appendChild(l);const h=document.createElement("button");h.classList.add("buttonGO"),h.innerHTML="Home",l.appendChild(h);const p=document.createElement("button");p.classList.add("buttonGO"),p.innerHTML="Another Round",l.appendChild(p),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateQuiz();else if("Enter"===t.innerHTML){for(u.hidden=!0,d.hidden=!0,fetch(`http://localhost:3000/items/${c+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:u.value,score:e})}),o=c;o<4;o++)fetch(`http://localhost:3000/items/${o+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i.items[o].name,score:i.items[o].score})});this.Clear(),this.CreateHome()}}))}))}CreateScoreboard(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=yield fetch("src/data/scoreboard.json"),t=yield e.json();let n=[],r=[],i=[],o=0;for(;o<t.items.length;o++)o<5?n.push(t.items[o]):o>=5&&o<10?r.push(t.items[o]):i.push(t.items[o]);const s=document.createElement("div");s.classList.add("containerSB"),this.mainDiv.appendChild(s);const c=document.createElement("p");c.classList.add("titleTable"),c.innerHTML="Quiz",s.appendChild(c);const a=document.createElement("table");a.classList.add("board"),s.appendChild(a);const u=document.createElement("thead");u.classList.add("boardHead"),a.appendChild(u);const d=document.createElement("th");d.classList.add("nameHead"),d.innerHTML="Name",u.appendChild(d);const l=document.createElement("th");l.classList.add("scoreHead"),l.innerHTML="Score",u.appendChild(l);const h=document.createElement("tbody");h.classList.add("tbody"),a.appendChild(h),n.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),h.appendChild(t)}));const p=document.createElement("p");p.innerHTML="Quickest Player",p.classList.add("titleTable"),s.appendChild(p);const f=document.createElement("table");f.classList.add("board"),s.appendChild(f);const m=document.createElement("thead");m.classList.add("boardHead"),f.appendChild(m);const b=document.createElement("th");b.classList.add("nameHead"),b.innerHTML="Name",m.appendChild(b);const v=document.createElement("th");v.classList.add("scoreHead"),v.innerHTML="Score",m.appendChild(v);const y=document.createElement("tbody");y.classList.add("tbody"),f.appendChild(y),r.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),y.appendChild(t)}));const L=document.createElement("p");L.classList.add("dare"),L.innerHTML="I bet you can't finish in all of them times combined: "+r.reduce(((e,t)=>e+t.score),0)+"s",s.appendChild(L);const g=document.createElement("p");g.innerHTML="Lightning Round",g.classList.add("titleTable"),s.appendChild(g);const C=document.createElement("table");C.classList.add("board"),s.appendChild(C);const H=document.createElement("thead");H.classList.add("boardHead"),C.appendChild(H);const E=document.createElement("th");E.classList.add("nameHead"),E.innerHTML="Name",H.appendChild(E);const T=document.createElement("th");T.classList.add("scoreHead"),T.innerHTML="Score",H.appendChild(T);const w=document.createElement("tbody");w.classList.add("tbody"),C.appendChild(w),i.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("td");r.innerHTML=String(e.score),t.appendChild(r),w.appendChild(t)}));const M=document.createElement("button");M.classList.add("buttonH"),M.innerHTML="Home",s.appendChild(M),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((e=>{this.Clear(),this.CreateHome()}))}))}CreateLightningRound(){return Ce(this,void 0,void 0,(function*(){this.Clear();let e="",t=0;const n=document.createElement("div");n.classList.add("container"),this.mainDiv.appendChild(n);const r=document.createElement("p");r.hidden=!0,r.classList.add("question"),n.appendChild(r);const i=document.createElement("button");i.classList.add("buttonH"),i.innerHTML="Go!",n.appendChild(i);const o=document.createElement("div");o.classList.add("buttonsGrid"),n.append(o);const s=document.createElement("button");s.hidden=!0,s.classList.add("buttonH"),o.appendChild(s);const c=document.createElement("button");c.hidden=!0,c.classList.add("buttonH"),o.appendChild(c);const a=document.createElement("button");a.hidden=!0,a.classList.add("buttonH"),o.appendChild(a);const u=document.createElement("button");u.hidden=!0,u.classList.add("buttonH"),o.appendChild(u),r.style.maxWidth=String(o.offsetWidth)+"px";const d=yield fetch("src/data/questions.json");this.questions=yield d.json();const l=e=>{this.CreateLRGameOver(e)},h=de(25e3),p=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).pipe((f=e=>function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=pe(e),r=function(e,t){return"number"==typeof he(e)?e.pop():1/0}(e),i=e;return i.length?1===i.length?Q(i[0]):function(e){return void 0===e&&(e=1/0),F(O,e)}(r)(ve(i,n)):le}(ye(e),de(5e3,5e3)),z((function(e,t){var n=null,r=!1,i=function(){return r&&!n&&t.complete()};e.subscribe(W(t,(function(e){null==n||n.unsubscribe();0;Q(f(e)).subscribe(n=W(t,(function(e){return t.next(e)}),(function(){n=null,i()})))}),(function(){r=!0,i()})))}))));var f,m;this.lightningQuestion$=p.pipe((m=h,z((function(e,t){Q(m).subscribe(W(t,(function(){return t.complete()}),L)),!t.closed&&e.subscribe(t)})))),ee(i,"click").subscribe({next:()=>{i.hidden=!0,r.hidden=!1,s.hidden=!1,c.hidden=!1,a.hidden=!1,u.hidden=!1,this.lightningQuestion$.subscribe({next:n=>{n instanceof HTMLButtonElement&&n.innerHTML===e&&(t++,console.log(`Score is: ${t}`));let i=Math.floor(Math.random()*this.questions.length);console.log(this.questions[i]),r.innerHTML=this.questions[i].question,s.innerHTML=this.questions[i].answers[3],c.innerHTML=this.questions[i].answers[0],a.innerHTML=this.questions[i].answers[1],u.innerHTML=this.questions[i].answers[2],r.style.maxWidth=String(o.offsetWidth)+"px",console.log((new Date).getSeconds());const d=this.questions.splice(i,1);e=d[0].correct_answer},complete(){l(t)}})}})}))}CreateLRGameOver(e){return Ce(this,void 0,void 0,(function*(){this.Clear();const t=document.createElement("div");t.classList.add("containerGO"),this.mainDiv.appendChild(t);const n=document.createElement("p");n.classList.add("pointsText"),n.innerHTML="You answered correctly "+String(e)+" questions",t.appendChild(n);const r=yield fetch("src/data/scoreboard.json"),i=yield r.json();let o=10,s=!1,c=0;for(;o<15;o++)i.items[o].score<e&&(s=!0,c=o,o=15);const a=document.createElement("div");a.classList.add("middleRow"),t.appendChild(a);const u=document.createElement("input");u.classList.add("inputGO"),u.hidden=!0,a.appendChild(u);const d=document.createElement("button");d.classList.add("buttonIGO"),d.hidden=!0,d.innerHTML="Enter",a.appendChild(d),s&&(u.hidden=!1,d.hidden=!1);const l=document.createElement("div");l.classList.add("buttonsGrid"),t.appendChild(l);const h=document.createElement("button");h.classList.add("buttonGO"),h.innerHTML="Home",l.appendChild(h);const p=document.createElement("button");p.classList.add("buttonGO"),p.innerHTML="Another Round",l.appendChild(p),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateLightningRound();else if("Enter"===t.innerHTML){for(u.hidden=!0,d.hidden=!0,fetch(`http://localhost:3000/items/${c+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:u.value,score:e})}),o=c;o<14;o++)fetch(`http://localhost:3000/items/${o+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i.items[o].name,score:i.items[o].score})});this.Clear(),this.CreateHome()}}))}))}CreateQuickestPlayer(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=document.createElement("div");e.classList.add("container"),this.mainDiv.appendChild(e);const t=document.createElement("button");t.classList.add("buttonH"),t.innerHTML="Go!",e.appendChild(t);const n=document.createElement("p");n.hidden=!0,n.classList.add("question"),e.appendChild(n);const r=document.createElement("div");r.classList.add("buttonsGrid"),e.append(r);const i=document.createElement("button");i.hidden=!0,i.classList.add("buttonH"),r.appendChild(i);const o=document.createElement("button");o.hidden=!0,o.classList.add("buttonH"),r.appendChild(o);const s=document.createElement("button");s.hidden=!0,s.classList.add("buttonH"),r.appendChild(s);const c=document.createElement("button");c.hidden=!0,c.classList.add("buttonH"),r.appendChild(c),n.style.maxWidth=String(r.offsetWidth)+"px";const a=yield fetch("src/data/questions.json");this.questions=yield a.json();let u,d,l="",h=!0;const p=(e,t)=>{this.CreateQPGameOver(e,t)};const f=ee(this.mainDiv,"click").pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target)),11<=0?function(){return le}:z((function(e,t){var n=0;e.subscribe(W(t,(function(e){++n<=11&&(t.next(e),11<=n&&t.complete())})))}))).subscribe({next:e=>{e instanceof HTMLButtonElement&&(e.innerHTML!==l&&"Go!"!==e.innerHTML?(h=!1,f.unsubscribe(),p(0,!1)):"Go!"===e.innerHTML&&(t.hidden=!0,n.hidden=!1,i.hidden=!1,o.hidden=!1,s.hidden=!1,c.hidden=!1,u=new Date));let a=Math.floor(Math.random()*this.questions.length);console.log(this.questions[a]),n.innerHTML=this.questions[a].question,i.innerHTML=this.questions[a].answers[3],o.innerHTML=this.questions[a].answers[0],s.innerHTML=this.questions[a].answers[1],c.innerHTML=this.questions[a].answers[2],n.style.maxWidth=String(r.offsetWidth)+"px";const m=this.questions.splice(a,1);l=m[0].correct_answer,d=e},complete(){if(h){console.log("Kraj: "+(new Date).getSeconds()),console.log("Pocetak: "+u.getSeconds());let e=(new Date).getSeconds()-u.getSeconds();console.log("P "+e),e<0&&(e=(new Date).getSeconds()+60-u.getSeconds(),console.log("N "+e));let t=(new Date).getMinutes()-u.getMinutes();0!==u.getSeconds()&&0===(new Date).getSeconds()&&(t--,console.log("Smanjeni minuti "+t)),1!==t||(new Date).getSeconds()-u.getSeconds()>0?(0!==t&&t--,console.log("Dodati minuti "+t),e+=60*t):0===e&&(e=60),console.log("Z "+e),p(e,!0)}}})}))}CreateQPGameOver(e,t){return Ce(this,void 0,void 0,(function*(){this.Clear();const n=document.createElement("div");n.classList.add("containerGO"),this.mainDiv.appendChild(n);const r=document.createElement("p");r.classList.add("pointsText"),r.innerHTML=t?"Congratulations! You finished in "+String(e)+" seconds":"You failed miserably!",n.appendChild(r);const i=yield fetch("src/data/scoreboard.json"),o=yield i.json();let s=5,c=!1,a=0;for(;s<10;s++)o.items[s].score>e&&(c=!0,a=s,s=10);const u=document.createElement("div");u.classList.add("middleRow"),n.appendChild(u);const d=document.createElement("input");d.classList.add("inputGO"),d.hidden=!0,u.appendChild(d);const l=document.createElement("button");l.classList.add("buttonIGO"),l.hidden=!0,l.innerHTML="Enter",u.appendChild(l),c&&"You failed miserably!"!==r.innerHTML&&(d.hidden=!1,l.hidden=!1);const h=document.createElement("div");h.classList.add("buttonsGrid"),n.appendChild(h);const p=document.createElement("button");p.classList.add("buttonGO"),p.innerHTML="Home",h.appendChild(p);const f=document.createElement("button");f.classList.add("buttonGO"),f.innerHTML="Another Round",h.appendChild(f),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((t=>{if("Home"===t.innerHTML)this.Clear(),this.CreateHome();else if("Another Round"===t.innerHTML)this.CreateQuickestPlayer();else if("Enter"===t.innerHTML){for(d.hidden=!0,l.hidden=!0,fetch(`http://localhost:3000/items/${a+1}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:d.value,score:e})}),s=a;s<9;s++)fetch(`http://localhost:3000/items/${s+2}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:o.items[s].name,score:o.items[s].score})});this.Clear(),this.CreateHome()}}))}))}shuffleArray(e){const t=[...e];for(let e=t.length-1;e>0;e--){const n=Math.floor(Math.random()*(e+1));[t[e],t[n]]=[t[n],t[e]]}return t}CreateRandomNameGenerator(){return Ce(this,void 0,void 0,(function*(){this.Clear();const e=document.createElement("div");e.classList.add("containerNG"),this.mainDiv.appendChild(e);let t=yield fetch("src/data/first.json"),n=yield t.json();n=this.shuffleArray(n);const r=ye(n);t=yield fetch("src/data/last.json");let i=yield t.json();i=this.shuffleArray(i),ge(r,ye(i)).pipe(U((([e,t])=>({f:e,l:t})))).subscribe({next:t=>{let r=0;for(;r<n.length;r++){const n=document.createElement("p");n.innerHTML=t.f[r].name+" "+t.l[r].name,n.classList.add("name"),e.appendChild(n)}},complete:()=>{const t=document.createElement("div");t.classList.add("buttonsGridNG"),e.append(t);const n=document.createElement("button");n.classList.add("buttonH"),n.innerHTML="Generate",t.append(n);const r=document.createElement("button");r.classList.add("buttonH"),r.innerHTML="Home",t.append(r)}}),this.clickSub=this.click$.pipe(ne((e=>e.target instanceof HTMLButtonElement)),U((e=>e.target))).subscribe((e=>{"Home"===e.innerHTML?(this.Clear(),this.CreateHome()):"Generate"===e.innerHTML&&this.CreateRandomNameGenerator()}))}))}}(He);Ee.CreateHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,